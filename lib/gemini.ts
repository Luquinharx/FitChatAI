import { GoogleGenerativeAI } from "@google/generative-ai"

const API_KEY = process.env.GOOGLE_API_KEY!
const genAI = new GoogleGenerativeAI(API_KEY)

const systemPrompt = `Voc√™ √© um personal trainer virtual especializado em fitness e exerc√≠cios f√≠sicos.

PERSONALIDADE:
- Motivador, encorajador e sempre positivo
- Usa linguagem acess√≠vel e amig√°vel
- Demonstra conhecimento t√©cnico sem ser intimidador
- Sempre prioriza a seguran√ßa do usu√°rio

CONHECIMENTO ESPECIALIZADO:
- T√©cnica correta de exerc√≠cios (agachamento, supino, rosca b√≠ceps, etc.)
- Anatomia e fisiologia do exerc√≠cio
- Diferentes n√≠veis de condicionamento f√≠sico
- Equipamentos e alternativas para casa
- Aquecimento, alongamento e recupera√ß√£o
- Preven√ß√£o de les√µes
- Progress√£o de treinos

FORMATO DE RESPOSTA:
- Use emojis fitness relevantes (üèãÔ∏è‚Äç‚ôÇÔ∏è, üí™, üî•, ‚úÖ, ‚ùå, üéØ, üìπ)
- Estruture respostas com se√ß√µes claras usando **negrito** e listas
- Inclua sempre dicas pr√°ticas e erros comuns
- Sugira progress√µes quando apropriado
- Seja espec√≠fico com repeti√ß√µes, s√©ries e cargas quando relevante

V√çDEOS E DEMONSTRA√á√ïES:
- Quando solicitado v√≠deos ou demonstra√ß√µes visuais, SEMPRE forne√ßa links reais
- Use links do YouTube de canais confi√°veis de fitness (Athlean-X, Calisthenia Movement, FitnessBlender, etc.)
- Para exerc√≠cios b√°sicos, procure por: "nome do exerc√≠cio proper form" ou "como fazer [exerc√≠cio]"
- Formate os links assim: üìπ **V√≠deo Demonstrativo:** [T√≠tulo do v√≠deo](link-do-youtube)
- Se n√£o souber um link espec√≠fico, sugira termos de busca: "Busque no YouTube: 'agachamento forma correta'"
- Para GIFs, use sites como Giphy ou sugerir busca por "exerc√≠cio + gif"

EXEMPLOS DE LINKS √öTEIS:
- Agachamento: Busque "squat proper form athlean x" no YouTube
- Flex√£o: Busque "push up correct technique" no YouTube  
- Prancha: Busque "plank exercise form" no YouTube
- Sempre mencione canais confi√°veis: Athlean-X, Calisthenia Movement, FitnessBlender, Jeff Nippard

DIRETRIZES DE SEGURAN√áA:
- Sempre mencione aquecimento antes de exerc√≠cios intensos
- Alerte sobre t√©cnica correta para prevenir les√µes
- Recomende consultar profissionais quando necess√°rio
- Nunca d√™ conselhos m√©dicos espec√≠ficos ou diagn√≥sticos
- Enfatize a import√¢ncia da progress√£o gradual

EXEMPLOS DE RESPOSTAS IDEAIS:
- Para exerc√≠cios: t√©cnica passo a passo, m√∫sculos trabalhados, equipamentos, dicas, erros comuns E link de v√≠deo
- Para treinos: estrutura, aquecimento, exerc√≠cios principais, alongamento
- Para iniciantes: come√ßar devagar, focar na forma, progress√£o segura
- Para avan√ßados: varia√ß√µes, intensifica√ß√£o, periodiza√ß√£o

IMPORTANTE:
- Responda sempre em portugu√™s brasileiro
- Seja educativo e motivador
- Adapte a linguagem ao n√≠vel do usu√°rio
- Incentive a consist√™ncia e paci√™ncia
- Celebre pequenas conquistas
- SEMPRE ofere√ßa recursos visuais (v√≠deos/GIFs) quando relevante`

export async function getChatResponse(
  messages: { role: "user" | "assistant" | "system"; content: string }[],
  experienceLevel = "iniciante",
): Promise<string> {
  try {
    if (!API_KEY) {
      throw new Error("Chave da API do Google n√£o configurada")
    }

    // Usando o modelo gemini-2.0-flash que √© mais avan√ßado
    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash",
      generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 2048,
      },
    })

    // Preparando o hist√≥rico de chat (√∫ltimas 10 mensagens para contexto)
    const recentMessages = messages.slice(-10)
    const history = recentMessages
      .slice(0, -1)
      .map((msg) => `${msg.role === "user" ? "Usu√°rio" : "Personal Trainer"}: ${msg.content}`)
    const lastMessage = messages[messages.length - 1].content

    // Criando o prompt completo com contexto
    const prompt = `${systemPrompt}

N√çVEL DE EXPERI√äNCIA DO USU√ÅRIO: ${experienceLevel}

HIST√ìRICO DA CONVERSA:
${history.length > 0 ? history.join("\n\n") : "Primeira intera√ß√£o"}

PERGUNTA/MENSAGEM ATUAL:
${lastMessage}

RESPOSTA (como personal trainer virtual motivador e t√©cnico):`

    console.log("Enviando requisi√ß√£o para Gemini...")

    // Gerando a resposta
    const result = await model.generateContent(prompt)
    const response = await result.response
    const text = response.text()

    if (!text || text.trim().length === 0) {
      throw new Error("Resposta vazia da API")
    }

    console.log("Resposta recebida do Gemini com sucesso")
    return text.trim()
  } catch (error: any) {
    console.error("Erro ao obter resposta do Gemini:", error)

    // Tratamento espec√≠fico de erros
    if (error instanceof Error) {
      const message = error.message.toLowerCase()

      if (message.includes("api key") || message.includes("authentication")) {
        throw new Error("üîë Erro de autentica√ß√£o com a API. Verifique a configura√ß√£o da chave API.")
      }

      if (message.includes("network") || message.includes("failed to fetch") || message.includes("connection")) {
        throw new Error("üåê Erro de conex√£o. Verifique sua internet e tente novamente.")
      }

      if (message.includes("quota") || message.includes("limit") || message.includes("rate")) {
        throw new Error("‚è±Ô∏è Limite de requisi√ß√µes atingido. Aguarde alguns minutos e tente novamente.")
      }

      if (message.includes("not found") || message.includes("not supported") || message.includes("model")) {
        throw new Error("ü§ñ Modelo de IA temporariamente indispon√≠vel. Tente novamente em alguns minutos.")
      }

      if (message.includes("safety") || message.includes("blocked")) {
        throw new Error("üõ°Ô∏è Conte√∫do bloqueado por pol√≠ticas de seguran√ßa. Reformule sua pergunta.")
      }
    }

    // Erro gen√©rico
    throw new Error("‚ùå Erro inesperado ao processar sua pergunta. Tente novamente ou reformule a pergunta.")
  }
}

// Fun√ß√£o para detectar n√≠vel de experi√™ncia baseado na mensagem
export function detectExperienceLevel(message: string): string {
  const lowerMessage = message.toLowerCase()

  if (lowerMessage.includes("iniciante") || lowerMessage.includes("come√ßando") || lowerMessage.includes("nunca fiz")) {
    return "iniciante"
  }

  if (
    lowerMessage.includes("intermedi√°rio") ||
    lowerMessage.includes("j√° treino") ||
    lowerMessage.includes("alguns meses")
  ) {
    return "intermedi√°rio"
  }

  if (
    lowerMessage.includes("avan√ßado") ||
    lowerMessage.includes("anos de treino") ||
    lowerMessage.includes("competi√ß√£o")
  ) {
    return "avan√ßado"
  }

  return "iniciante" // padr√£o
}
